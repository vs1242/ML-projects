
    {
      "cell_type": "markdown",
      "source": [
        "# Coding Question Answer\n",
        "\n",
        "**1)** To improve the performance of the LeNet-5 model on the CIFAR-10 dataset, the following modifications were made:\n",
        "Data augmentation: All augmentations such as resize_transform (random cropping and horizontal flipping), improves the data distribution in the training set.\n",
        "Model architecture: To enlarge the capacity of LeNet5 architecture, we change it. Both the number of filters in each convolutional layer increased, and batch normlayers were added after each convolutional layer to make training more stable.\n",
        "Optimizer: Although AdamW optimizer was used instead of the standard Adam, a weight decay of 1e-4 was used in order to provide better regularization.\n",
        "Learning rate scheduler: Therefore, in order to simplify the training, I implemented a stepLR scheduler to decrease the learning rate as the training proceeded, thus facilitating the model fine tuning in later epochs.\n",
        "Dropout: In the classifier part of the network we added a dropout layer with a rate of 0.5 to prevent overfitting.\n",
        "With these modifications, now, the better feature extraction, decreased overfitting and better training resulted in increased accuracy on the CIFAR-10 dataset.\n",
        "\n",
        "\n",
        "---\n",
        "**2)** Test accuracy: 81.01%\n",
        "\n",
        "Experiment logging record for the best model:\n",
        "Data augmentation:\n",
        "Random cropping (32x32 with padding = 4).\n",
        "Random horizontal flipping\n",
        "Scaling (mean = 0.5, standard deviation = 0.5 for every channel)\n",
        "Model architecture:\n",
        "Raised amount of filtering layers in convolutional layers\n",
        "Included BN layer right after every convolution at the model.\n",
        "The classifier has been altered with added fully connected layers and dropout added to the design.\n",
        "Optimizer:\n",
        "AdamW scheduler with a learning rate of 0.001 and weight decay of 1e-4\n",
        "Learning rate scheduler:\n",
        "StepLR with step size schedule 30 and gamma 0.1\n",
        "Training parameters:\n",
        "Batch size: 280\n",
        "Number of epochs: 10\n",
        "These changes provided better identification of the features, controlling the problem of overfitting, better training of the model, which contributed to the achievement of 81.01% accuracy on CIFAR-10 dataset.\n",
        "\n"
      ],
      "metadata": {
        "id": "8OGsx50Qfmhs"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ORj09gnrj5wp"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import time\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "from torchvision import datasets\n",
        "from torchvision import transforms\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image\n",
        "\n",
        "\n",
        "if torch.cuda.is_available():\n",
        "    torch.backends.cudnn.deterministic = True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I6hghKPxj5w0"
      },
      "source": [
        "## Model Settings"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NnT0sZIwj5wu"
      },
      "outputs": [],
      "source": [
        "##########################\n",
        "### SETTINGS\n",
        "##########################\n",
        "\n",
        "# Hyperparameters\n",
        "RANDOM_SEED = 1\n",
        "LEARNING_RATE = 0.001\n",
        "BATCH_SIZE = 280\n",
        "NUM_EPOCHS = 10\n",
        "\n",
        "# Architecture\n",
        "NUM_FEATURES = 32*32\n",
        "NUM_CLASSES = 10\n",
        "\n",
        "# Other\n",
        "if torch.cuda.is_available():\n",
        "    DEVICE = \"cuda:0\"\n",
        "else:\n",
        "    DEVICE = \"cpu\"\n",
        "\n",
        "GRAYSCALE = False"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zlFBWzfv2BY3"
      },
      "source": [
        "### CIFAR-10 Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x8-y4u8P2BY3",
        "outputId": "7760ee15-a767-4f4d-e859-346755bc98ff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files already downloaded and verified\n",
            "Image batch dimensions: torch.Size([280, 3, 32, 32])\n",
            "Image label dimensions: torch.Size([280])\n",
            "Image batch dimensions: torch.Size([280, 3, 32, 32])\n",
            "Image label dimensions: torch.Size([280])\n"
          ]
        }
      ],
      "source": [
        "##########################\n",
        "### CIFAR-10 Dataset\n",
        "##########################\n",
        "\n",
        "train_mean = (0.5, 0.5, 0.5)\n",
        "train_std = (0.5, 0.5, 0.5)\n",
        "\n",
        "resize_transform = transforms.Compose([\n",
        "    transforms.RandomCrop(32, padding=4),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(train_mean, train_std)\n",
        "])\n",
        "\n",
        "# Note transforms.ToTensor() scales input images\n",
        "# to 0-1 range\n",
        "train_dataset = datasets.CIFAR10(root='data',\n",
        "                                 train=True,\n",
        "                                 transform=resize_transform,\n",
        "                                 download=True)\n",
        "\n",
        "test_dataset = datasets.CIFAR10(root='data',\n",
        "                                train=False,\n",
        "                                transform=resize_transform)\n",
        "\n",
        "\n",
        "train_loader = DataLoader(dataset=train_dataset,\n",
        "                          batch_size=BATCH_SIZE,\n",
        "                          num_workers=8,\n",
        "                          shuffle=True)\n",
        "\n",
        "test_loader = DataLoader(dataset=test_dataset,\n",
        "                         batch_size=BATCH_SIZE,\n",
        "                         num_workers=8,\n",
        "                         shuffle=False)\n",
        "\n",
        "# Checking the dataset\n",
        "for images, labels in train_loader:\n",
        "    print('Image batch dimensions:', images.shape)\n",
        "    print('Image label dimensions:', labels.shape)\n",
        "    break\n",
        "\n",
        "# Checking the dataset\n",
        "for images, labels in train_loader:\n",
        "    print('Image batch dimensions:', images.shape)\n",
        "    print('Image label dimensions:', labels.shape)\n",
        "    break"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SgMzBPQ02BY3"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ORGq4Dq2BY3",
        "outputId": "8584b57c-fbb8-474c-83a3-3105936abb8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | Batch index: 0 | Batch size: 280\n",
            "Epoch: 2 | Batch index: 0 | Batch size: 280\n"
          ]
        }
      ],
      "source": [
        "device = torch.device(DEVICE)\n",
        "torch.manual_seed(0)\n",
        "\n",
        "for epoch in range(2):\n",
        "\n",
        "    for batch_idx, (x, y) in enumerate(train_loader):\n",
        "\n",
        "        print('Epoch:', epoch+1, end='')\n",
        "        print(' | Batch index:', batch_idx, end='')\n",
        "        print(' | Batch size:', y.size()[0])\n",
        "\n",
        "        x = x.to(device)\n",
        "        y = y.to(device)\n",
        "        break"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aI1Oil3q2BY3"
      },
      "outputs": [],
      "source": [
        "class LeNet5(nn.Module):\n",
        "    def __init__(self, num_classes, grayscale=False):\n",
        "        super(LeNet5, self).__init__()\n",
        "\n",
        "        self.grayscale = grayscale\n",
        "        self.num_classes = num_classes\n",
        "\n",
        "        if self.grayscale:\n",
        "            in_channels = 1\n",
        "        else:\n",
        "            in_channels = 3\n",
        "\n",
        "        self.features = nn.Sequential(\n",
        "    nn.Conv2d(in_channels, 64, kernel_size=3, padding=1),\n",
        "    nn.BatchNorm2d(64),\n",
        "    nn.ReLU(),\n",
        "    nn.Conv2d(64, 64, kernel_size=3, padding=1),\n",
        "    nn.BatchNorm2d(64),\n",
        "    nn.ReLU(),\n",
        "    nn.MaxPool2d(kernel_size=2),\n",
        "    nn.Conv2d(64, 128, kernel_size=3, padding=1),\n",
        "    nn.BatchNorm2d(128),\n",
        "    nn.ReLU(),\n",
        "    nn.Conv2d(128, 128, kernel_size=3, padding=1),\n",
        "    nn.BatchNorm2d(128),\n",
        "    nn.ReLU(),\n",
        "    nn.MaxPool2d(kernel_size=2)\n",
        ")\n",
        "\n",
        "        self.classifier = nn.Sequential(\n",
        "    nn.Linear(128 * 8 * 8, 1024),\n",
        "    nn.ReLU(),\n",
        "    nn.Dropout(0.5),\n",
        "    nn.Linear(1024, 512),\n",
        "    nn.ReLU(),\n",
        "    nn.Dropout(0.5),\n",
        "    nn.Linear(512, num_classes)\n",
        ")\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.features(x)\n",
        "        x = torch.flatten(x, 1)\n",
        "        logits = self.classifier(x)\n",
        "        probas = F.softmax(logits, dim=1)\n",
        "        return logits, probas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_lza9t_uj5w1"
      },
      "outputs": [],
      "source": [
        "torch.manual_seed(RANDOM_SEED)\n",
        "\n",
        "model = LeNet5(NUM_CLASSES, GRAYSCALE)\n",
        "model.to(DEVICE)\n",
        "\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=LEARNING_RATE, weight_decay=1e-4)\n",
        "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RAodboScj5w6"
      },
      "source": [
        "## Training"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dzh3ROmRj5w7",
        "outputId": "ed10664c-da86-4e1c-e8de-bf382d4ca909"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 001/020 | Batch 0000/0179 | Cost: 2.3131\n",
            "Epoch: 001/020 | Batch 0050/0179 | Cost: 1.8971\n",
            "Epoch: 001/020 | Batch 0100/0179 | Cost: 1.7050\n",
            "Epoch: 001/020 | Batch 0150/0179 | Cost: 1.5778\n",
            "Epoch: 001/020 | Train: 38.138%\n",
            "Time elapsed: 0.70 min\n",
            "Epoch: 002/020 | Batch 0000/0179 | Cost: 1.6123\n",
            "Epoch: 002/020 | Batch 0050/0179 | Cost: 1.4627\n",
            "Epoch: 002/020 | Batch 0100/0179 | Cost: 1.4503\n",
            "Epoch: 002/020 | Batch 0150/0179 | Cost: 1.3661\n",
            "Epoch: 002/020 | Train: 51.934%\n",
            "Time elapsed: 1.32 min\n",
            "Epoch: 003/020 | Batch 0000/0179 | Cost: 1.2529\n",
            "Epoch: 003/020 | Batch 0050/0179 | Cost: 1.2669\n",
            "Epoch: 003/020 | Batch 0100/0179 | Cost: 1.2641\n",
            "Epoch: 003/020 | Batch 0150/0179 | Cost: 1.0007\n",
            "Epoch: 003/020 | Train: 59.382%\n",
            "Time elapsed: 1.97 min\n",
            "Epoch: 004/020 | Batch 0000/0179 | Cost: 1.1415\n",
            "Epoch: 004/020 | Batch 0050/0179 | Cost: 1.1099\n",
            "Epoch: 004/020 | Batch 0100/0179 | Cost: 1.0374\n",
            "Epoch: 004/020 | Batch 0150/0179 | Cost: 1.0198\n",
            "Epoch: 004/020 | Train: 64.472%\n",
            "Time elapsed: 2.60 min\n",
            "Epoch: 005/020 | Batch 0000/0179 | Cost: 1.0338\n",
            "Epoch: 005/020 | Batch 0050/0179 | Cost: 0.9669\n",
            "Epoch: 005/020 | Batch 0100/0179 | Cost: 0.9332\n",
            "Epoch: 005/020 | Batch 0150/0179 | Cost: 0.8474\n",
            "Epoch: 005/020 | Train: 65.400%\n",
            "Time elapsed: 3.31 min\n",
            "Epoch: 006/020 | Batch 0000/0179 | Cost: 0.9657\n",
            "Epoch: 006/020 | Batch 0050/0179 | Cost: 0.9485\n",
            "Epoch: 006/020 | Batch 0100/0179 | Cost: 1.0624\n",
            "Epoch: 006/020 | Batch 0150/0179 | Cost: 1.1063\n",
            "Epoch: 006/020 | Train: 67.282%\n",
            "Time elapsed: 3.94 min\n",
            "Epoch: 007/020 | Batch 0000/0179 | Cost: 0.8655\n",
            "Epoch: 007/020 | Batch 0050/0179 | Cost: 0.8734\n",
            "Epoch: 007/020 | Batch 0100/0179 | Cost: 0.8691\n",
            "Epoch: 007/020 | Batch 0150/0179 | Cost: 0.7693\n",
            "Epoch: 007/020 | Train: 66.710%\n",
            "Time elapsed: 4.60 min\n",
            "Epoch: 008/020 | Batch 0000/0179 | Cost: 0.7636\n",
            "Epoch: 008/020 | Batch 0050/0179 | Cost: 0.8609\n",
            "Epoch: 008/020 | Batch 0100/0179 | Cost: 0.8380\n",
            "Epoch: 008/020 | Batch 0150/0179 | Cost: 0.8341\n",
            "Epoch: 008/020 | Train: 73.318%\n",
            "Time elapsed: 5.23 min\n",
            "Epoch: 009/020 | Batch 0000/0179 | Cost: 0.8931\n",
            "Epoch: 009/020 | Batch 0050/0179 | Cost: 0.7682\n",
            "Epoch: 009/020 | Batch 0100/0179 | Cost: 0.8712\n",
            "Epoch: 009/020 | Batch 0150/0179 | Cost: 0.7913\n",
            "Epoch: 009/020 | Train: 66.582%\n",
            "Time elapsed: 5.91 min\n",
            "Epoch: 010/020 | Batch 0000/0179 | Cost: 0.7154\n",
            "Epoch: 010/020 | Batch 0050/0179 | Cost: 0.7892\n",
            "Epoch: 010/020 | Batch 0100/0179 | Cost: 0.7484\n",
            "Epoch: 010/020 | Batch 0150/0179 | Cost: 0.7853\n",
            "Epoch: 010/020 | Train: 73.954%\n",
            "Time elapsed: 6.53 min\n",
            "Epoch: 011/020 | Batch 0000/0179 | Cost: 0.8088\n",
            "Epoch: 011/020 | Batch 0050/0179 | Cost: 0.6853\n",
            "Epoch: 011/020 | Batch 0100/0179 | Cost: 0.7795\n",
            "Epoch: 011/020 | Batch 0150/0179 | Cost: 0.8421\n",
            "Epoch: 011/020 | Train: 72.184%\n",
            "Time elapsed: 7.19 min\n",
            "Epoch: 012/020 | Batch 0000/0179 | Cost: 0.7050\n",
            "Epoch: 012/020 | Batch 0050/0179 | Cost: 0.7117\n",
            "Epoch: 012/020 | Batch 0100/0179 | Cost: 0.6612\n",
            "Epoch: 012/020 | Batch 0150/0179 | Cost: 0.7134\n",
            "Epoch: 012/020 | Train: 76.200%\n",
            "Time elapsed: 7.84 min\n",
            "Epoch: 013/020 | Batch 0000/0179 | Cost: 0.6863\n",
            "Epoch: 013/020 | Batch 0050/0179 | Cost: 0.6737\n",
            "Epoch: 013/020 | Batch 0100/0179 | Cost: 0.6847\n",
            "Epoch: 013/020 | Batch 0150/0179 | Cost: 0.6805\n",
            "Epoch: 013/020 | Train: 77.592%\n",
            "Time elapsed: 8.51 min\n",
            "Epoch: 014/020 | Batch 0000/0179 | Cost: 0.7030\n",
            "Epoch: 014/020 | Batch 0050/0179 | Cost: 0.5976\n",
            "Epoch: 014/020 | Batch 0100/0179 | Cost: 0.6102\n",
            "Epoch: 014/020 | Batch 0150/0179 | Cost: 0.6761\n",
            "Epoch: 014/020 | Train: 77.834%\n",
            "Time elapsed: 9.14 min\n",
            "Epoch: 015/020 | Batch 0000/0179 | Cost: 0.7738\n",
            "Epoch: 015/020 | Batch 0050/0179 | Cost: 0.6011\n",
            "Epoch: 015/020 | Batch 0100/0179 | Cost: 0.7208\n",
            "Epoch: 015/020 | Batch 0150/0179 | Cost: 0.5882\n",
            "Epoch: 015/020 | Train: 78.736%\n",
            "Time elapsed: 9.80 min\n",
            "Epoch: 016/020 | Batch 0000/0179 | Cost: 0.6927\n",
            "Epoch: 016/020 | Batch 0050/0179 | Cost: 0.6739\n",
            "Epoch: 016/020 | Batch 0100/0179 | Cost: 0.5717\n",
            "Epoch: 016/020 | Batch 0150/0179 | Cost: 0.6245\n",
            "Epoch: 016/020 | Train: 78.326%\n",
            "Time elapsed: 10.44 min\n",
            "Epoch: 017/020 | Batch 0000/0179 | Cost: 0.6256\n",
            "Epoch: 017/020 | Batch 0050/0179 | Cost: 0.5532\n",
            "Epoch: 017/020 | Batch 0100/0179 | Cost: 0.6370\n",
            "Epoch: 017/020 | Batch 0150/0179 | Cost: 0.7158\n",
            "Epoch: 017/020 | Train: 82.434%\n",
            "Time elapsed: 11.11 min\n",
            "Epoch: 018/020 | Batch 0000/0179 | Cost: 0.6614\n",
            "Epoch: 018/020 | Batch 0050/0179 | Cost: 0.5962\n",
            "Epoch: 018/020 | Batch 0100/0179 | Cost: 0.5933\n",
            "Epoch: 018/020 | Batch 0150/0179 | Cost: 0.5668\n",
            "Epoch: 018/020 | Train: 79.464%\n",
            "Time elapsed: 11.73 min\n",
            "Epoch: 019/020 | Batch 0000/0179 | Cost: 0.5333\n",
            "Epoch: 019/020 | Batch 0050/0179 | Cost: 0.5939\n",
            "Epoch: 019/020 | Batch 0100/0179 | Cost: 0.6057\n",
            "Epoch: 019/020 | Batch 0150/0179 | Cost: 0.6953\n",
            "Epoch: 019/020 | Train: 82.656%\n",
            "Time elapsed: 12.39 min\n",
            "Epoch: 020/020 | Batch 0000/0179 | Cost: 0.4814\n",
            "Epoch: 020/020 | Batch 0050/0179 | Cost: 0.6061\n",
            "Epoch: 020/020 | Batch 0100/0179 | Cost: 0.5541\n",
            "Epoch: 020/020 | Batch 0150/0179 | Cost: 0.6291\n",
            "Epoch: 020/020 | Train: 83.608%\n",
            "Time elapsed: 13.01 min\n",
            "Total Training Time: 13.01 min\n"
          ]
        }
      ],
      "source": [
        "def compute_accuracy(model, data_loader, device):\n",
        "    correct_pred, num_examples = 0, 0\n",
        "    for i, (features, targets) in enumerate(data_loader):\n",
        "\n",
        "        features = features.to(device)\n",
        "        targets = targets.to(device)\n",
        "\n",
        "        logits, probas = model(features)\n",
        "        _, predicted_labels = torch.max(probas, 1)\n",
        "        num_examples += targets.size(0)\n",
        "        correct_pred += (predicted_labels == targets).sum()\n",
        "    return correct_pred.float()/num_examples * 100\n",
        "\n",
        "NUM_EPOCHS = 20\n",
        "start_time = time.time()\n",
        "for epoch in range(NUM_EPOCHS):\n",
        "\n",
        "    model.train()\n",
        "    for batch_idx, (features, targets) in enumerate(train_loader):\n",
        "\n",
        "        features = features.to(DEVICE)\n",
        "        targets = targets.to(DEVICE)\n",
        "\n",
        "        ### FORWARD AND BACK PROP\n",
        "        logits, probas = model(features)\n",
        "        cost = F.cross_entropy(logits, targets)\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        cost.backward()\n",
        "\n",
        "        ### UPDATE MODEL PARAMETERS\n",
        "        optimizer.step()\n",
        "\n",
        "\n",
        "        ### LOGGING\n",
        "        if not batch_idx % 50:\n",
        "            print ('Epoch: %03d/%03d | Batch %04d/%04d | Cost: %.4f'\n",
        "                   %(epoch+1, NUM_EPOCHS, batch_idx,\n",
        "                     len(train_loader), cost))\n",
        "\n",
        "\n",
        "\n",
        "    model.eval()\n",
        "    with torch.set_grad_enabled(False): # save memory during inference\n",
        "        print('Epoch: %03d/%03d | Train: %.3f%%' % (\n",
        "              epoch+1, NUM_EPOCHS,\n",
        "              compute_accuracy(model, train_loader, device=DEVICE)))\n",
        "\n",
        "    print('Time elapsed: %.2f min' % ((time.time() - start_time)/60))\n",
        "\n",
        "print('Total Training Time: %.2f min' % ((time.time() - start_time)/60))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "paaeEQHQj5xC"
      },
      "source": [
        "## Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gzQMWKq5j5xE",
        "outputId": "10fe1c5d-6e7f-41a6-c2f0-163792002d85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test accuracy: 81.01%\n"
          ]
        }
      ],
      "source": [
        "with torch.set_grad_enabled(False): # save memory during inference\n",
        "    print('Test accuracy: %.2f%%' % (compute_accuracy(model, test_loader, device=DEVICE)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q7IycU212BY3"
      },
      "outputs": [],
      "source": [
        "class UnNormalize(object):\n",
        "    def __init__(self, mean, std):\n",
        "        self.mean = mean\n",
        "        self.std = std\n",
        "\n",
        "    def __call__(self, tensor):\n",
        "        \"\"\"\n",
        "        Parameters:\n",
        "        ------------\n",
        "        tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n",
        "\n",
        "        Returns:\n",
        "        ------------\n",
        "        Tensor: Normalized image.\n",
        "\n",
        "        \"\"\"\n",
        "        for t, m, s in zip(tensor, self.mean, self.std):\n",
        "            t.mul_(s).add_(m)\n",
        "        return tensor\n",
        "\n",
        "unorm = UnNormalize(mean=train_mean, std=train_std)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "hA_g0FF92BY3",
        "outputId": "8ec96d54-a7ec-4981-b4d6-dbdf56933447"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "test_loader = DataLoader(dataset=train_dataset,\n",
        "                         batch_size=BATCH_SIZE,\n",
        "                         shuffle=True)\n",
        "\n",
        "for features, targets in test_loader:\n",
        "    break\n",
        "\n",
        "\n",
        "_, predictions = model.forward(features[:8].to(DEVICE))\n",
        "predictions = torch.argmax(predictions, dim=1)\n",
        "\n",
        "d = {0: 'airplane',\n",
        "     1: 'automobile',\n",
        "     2: 'bird',\n",
        "     3: 'cat',\n",
        "     4: 'deer',\n",
        "     5: 'dog',\n",
        "     6: 'frog',\n",
        "     7: 'horse',\n",
        "     8: 'ship',\n",
        "     9: 'truck'}\n",
        "\n",
        "fig, ax = plt.subplots(1, 8, figsize=(20, 10))\n",
        "for i in range(8):\n",
        "    img = unorm(features[i])\n",
        "    ax[i].imshow(np.transpose(img, (1, 2, 0)))\n",
        "    ax[i].set_xlabel(d[predictions[i].item()])\n",
        "\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.0"
    },
    "toc": {
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": true,
      "toc_position": {
        "height": "calc(100% - 180px)",
        "left": "10px",
        "top": "150px",
        "width": "371px"
      },
      "toc_section_display": true,
      "toc_window_display": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
