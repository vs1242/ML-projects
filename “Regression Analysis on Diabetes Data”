import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.metrics import mean_squared_error

diabetes_dataset = load_diabetes()
single_feature = diabetes_dataset.data[:, 0]
response_variable = diabetes_dataset.target

train_data = single_feature[:40].reshape(-1, 1)
train_labels = response_variable[:40]
test_data = single_feature[-40:].reshape(-1, 1)
test_labels = response_variable[-40:]

def compute_parameters(X, y):
    augmented_X = np.c_[np.ones((X.shape[0], 1)), X]
    params = np.linalg.inv(augmented_X.T @ augmented_X) @ augmented_X.T @ y
    return params

def predict_values(X, params):
    augmented_X = np.c_[np.ones((X.shape[0], 1)), X]
    return augmented_X @ params

def plot_results(X, y, predicted, title):
    plt.scatter(X, y, color='black', label='Actual Data')
    plt.plot(X, predicted, color='blue', label='Model Prediction')
    plt.xlabel('Input Feature')
    plt.ylabel('Response Variable')
    plt.title(title)
    plt.legend()

ols_parameters = compute_parameters(train_data, train_labels)
ols_predictions = predict_values(test_data, ols_parameters)
ols_error = mean_squared_error(test_labels, ols_predictions)

from sklearn.linear_model import Lasso
lasso_regressor = Lasso(alpha=0.1)
lasso_regressor.fit(train_data, train_labels)
predictions_lasso = lasso_regressor.predict(test_data)
lasso_error = mean_squared_error(test_labels, predictions_lasso)

from sklearn.linear_model import Ridge
ridge_regressor = Ridge(alpha=0.1)
ridge_regressor.fit(train_data, train_labels)
predictions_ridge = ridge_regressor.predict(test_data)
ridge_error = mean_squared_error(test_labels, predictions_ridge)

plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plot_results(test_data.flatten(), test_labels, ols_predictions, 'OLS Regression Analysis')

plt.subplot(1, 3, 2)
plot_results(test_data.flatten(), test_labels, predictions_lasso, 'Lasso Regression Analysis')

plt.subplot(1, 3, 3)
plot_results(test_data.flatten(), test_labels, predictions_ridge, 'Ridge Regression Analysis')

plt.tight_layout()
plt.show()

alpha_range = np.logspace(-2, 2, 100)
coefficients = []
for alpha in alpha_range:
    dynamic_ridge = Ridge(alpha=alpha)
    dynamic_ridge.fit(train_data, train_labels)
    coefficients.append(dynamic_ridge.coef_[0])

plt.figure(figsize=(8, 5))
plt.semilogx(alpha_range, coefficients)
plt.xlabel('Regularization Strength (Alpha)')
plt.ylabel('Coefficient Magnitude')
plt.title('Coefficient Trends in Ridge Regression')
plt.grid(True)
plt.show()

print("OLS Parameters:", ols_parameters)
print("OLS Mean Squared Error:", ols_error)
print("Lasso Coefficients:", lasso_regressor.coef_)
print("Lasso Mean Squared Error:", lasso_error)
print("Ridge Coefficients:", ridge_regressor.coef_)
print("Ridge Mean Squared Error:", ridge_error)
